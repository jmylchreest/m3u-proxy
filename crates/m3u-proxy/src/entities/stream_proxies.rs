//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;
use crate::models::StreamProxyMode;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "stream_proxies")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub proxy_mode: StreamProxyMode,
    pub upstream_timeout: Option<i32>,
    pub buffer_size: Option<i32>,
    pub max_concurrent_streams: Option<i32>,
    pub starting_channel_number: i32,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub last_generated_at: Option<DateTime<Utc>>,
    pub is_active: bool,
    pub auto_regenerate: bool,
    pub cache_channel_logos: bool,
    pub cache_program_logos: bool,
    pub relay_profile_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::proxy_epg_sources::Entity")]
    ProxyEpgSources,
    #[sea_orm(has_many = "super::proxy_filters::Entity")]
    ProxyFilters,
    #[sea_orm(has_many = "super::proxy_sources::Entity")]
    ProxySources,
    #[sea_orm(
        belongs_to = "super::relay_profiles::Entity",
        from = "Column::RelayProfileId",
        to = "super::relay_profiles::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    RelayProfiles,
}

impl Related<super::proxy_epg_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProxyEpgSources.def()
    }
}

impl Related<super::proxy_filters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProxyFilters.def()
    }
}

impl Related<super::proxy_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProxySources.def()
    }
}

impl Related<super::relay_profiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelayProfiles.def()
    }
}

impl Related<super::epg_sources::Entity> for Entity {
    fn to() -> RelationDef {
        super::proxy_epg_sources::Relation::EpgSources.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::proxy_epg_sources::Relation::StreamProxies
                .def()
                .rev(),
        )
    }
}

impl Related<super::filters::Entity> for Entity {
    fn to() -> RelationDef {
        super::proxy_filters::Relation::Filters.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::proxy_filters::Relation::StreamProxies.def().rev())
    }
}

impl Related<super::stream_sources::Entity> for Entity {
    fn to() -> RelationDef {
        super::proxy_sources::Relation::StreamSources.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::proxy_sources::Relation::StreamProxies.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
