name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-upload:
    name: Build and Upload ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            archive_name: m3u-proxy-linux-x86_64.tar.gz

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
            archive_name: m3u-proxy-linux-arm64.tar.gz

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            archive_name: m3u-proxy-macos-x86_64.tar.gz

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            archive_name: m3u-proxy-macos-arm64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Get version and update source files
        run: |
          VERSION=$(just get-version)
          just set-version "$VERSION"
          echo "Building with version: $VERSION"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry and git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-target-

      - name: Install cross compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup build database
        run: |
          mkdir -p data
          touch data/build.db
          cargo run -- --database-url sqlite:data/build.db migrate

      - name: Install cross (if needed)
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build with cross
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Build natively
        if: "!matrix.cross"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip target/${{ matrix.target }}/release/m3u-proxy
          elif command -v ${{ matrix.target }}-strip >/dev/null 2>&1; then
            ${{ matrix.target }}-strip target/${{ matrix.target }}/release/m3u-proxy
          fi

      - name: Create release archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Create archive with binary and additional files
          mkdir -p m3u-proxy-release
          cp m3u-proxy m3u-proxy-release/

          # Copy additional files
          cd ../../..
          cp README.md m3u-proxy-release/ 2>/dev/null || echo "README.md not found"
          cp LICENSE m3u-proxy-release/ 2>/dev/null || echo "LICENSE not found"
          cp config.example.toml m3u-proxy-release/config.toml 2>/dev/null || echo "config.example.toml not found"

          # Create the archive
          tar czf ${{ matrix.archive_name }} -C target/${{ matrix.target }}/release m3u-proxy-release

          # Verify archive was created
          ls -la ${{ matrix.archive_name }}

      - name: Generate checksums
        shell: bash
        run: |
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum ${{ matrix.archive_name }} > ${{ matrix.archive_name }}.sha256
          elif command -v shasum >/dev/null 2>&1; then
            shasum -a 256 ${{ matrix.archive_name }} > ${{ matrix.archive_name }}.sha256
          fi
          cat ${{ matrix.archive_name }}.sha256

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.archive_name }}
          asset_name: ${{ matrix.archive_name }}
          asset_content_type: application/gzip

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.archive_name }}.sha256
          asset_name: ${{ matrix.archive_name }}.sha256
          asset_content_type: text/plain

  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Get version and update source files
        id: version
        run: |
          VERSION=$(just get-version)
          just set-version "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building with version: $VERSION"

          # Determine if this is a release or snapshot
          if echo "$VERSION" | grep -q "snapshot"; then
            echo "is_snapshot=true" >> $GITHUB_OUTPUT
            echo "docker_tag_suffix=snapshot" >> $GITHUB_OUTPUT
          else
            echo "is_snapshot=false" >> $GITHUB_OUTPUT
            echo "docker_tag_suffix=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.docker_tag_suffix }}
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=m3u-proxy
            org.opencontainers.image.description=M3U Proxy Server
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ steps.version.outputs.version }}
            BUILDKIT_INLINE_CACHE=1

  create-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [build-and-upload, docker-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Comparing with previous tag: $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog content
          CHANGELOG="## What's Changed

          $COMMITS

          ## Docker Images

          - \`ghcr.io/${{ github.repository }}:latest\`
          - \`ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/}\`

          ## Installation

          1. Download the appropriate binary for your platform from the assets below
          2. Extract the archive: \`tar -xzf m3u-proxy-*.tar.gz\`
          3. Run the binary: \`./m3u-proxy-release/m3u-proxy\`

          Or use Docker:
          \`\`\`bash
          docker run -p 3000:3000 -v ./data:/app/data ghcr.io/${{ github.repository }}:latest
          \`\`\`"

          echo "$CHANGELOG" > release_notes.md

      - name: Update release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const release_notes = fs.readFileSync('release_notes.md', 'utf8');

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: release_notes
            });
