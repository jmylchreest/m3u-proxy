name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Prepare
    runs-on: ubuntu-latest
    outputs:
      sqlx-prepared: ${{ steps.sqlx-check.outputs.prepared }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-check-
            ${{ runner.os }}-cargo-target-

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features sqlite,rustls

      - name: Create database
        run: |
          mkdir -p data
          touch data/m3u-proxy.db

      - name: Run migrations
        run: sqlx migrate run --database-url sqlite:data/m3u-proxy.db

      - name: Check SQLx prepared queries
        id: sqlx-check
        run: |
          if cargo sqlx prepare --database-url sqlite:data/m3u-proxy.db --check; then
            echo "prepared=true" >> $GITHUB_OUTPUT
          else
            echo "prepared=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare SQLx queries
        if: steps.sqlx-check.outputs.prepared == 'false'
        run: |
          cargo sqlx prepare --database-url sqlite:data/m3u-proxy.db
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .sqlx/
          if ! git diff --cached --exit-code; then
            git commit -m "Update SQLx prepared queries"
            git push
          fi

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-test-
            ${{ runner.os }}-cargo-target-

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features sqlite,rustls

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/test.db
          sqlx migrate run --database-url sqlite:data/test.db

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

      - name: Run integration tests
        run: cargo test --test '*' --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-index-
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-

      - name: Install cross compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features sqlite,rustls

      - name: Setup build database
        run: |
          mkdir -p data
          touch data/build.db
          sqlx migrate run --database-url sqlite:data/build.db

      - name: Prepare SQLx queries for build
        run: cargo sqlx prepare --database-url sqlite:data/build.db

      - name: Build with cross (if needed)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --target ${{ matrix.target }}
        env:
          SQLX_OFFLINE: true

      - name: Build natively
        if: "!matrix.cross"
        run: cargo build --release --target ${{ matrix.target }}
        env:
          SQLX_OFFLINE: true

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip target/${{ matrix.target }}/release/m3u-proxy
          fi

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Determine archive name
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            ARCHIVE_NAME="m3u-proxy-${{ matrix.target }}.zip"
            7z a ../../../$ARCHIVE_NAME m3u-proxy.exe
          else
            ARCHIVE_NAME="m3u-proxy-${{ matrix.target }}.tar.gz"
            tar czf ../../../$ARCHIVE_NAME m3u-proxy
          fi

          cd ../../..
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: m3u-proxy-${{ matrix.target }}
          path: ${{ env.ARCHIVE_NAME }}
          retention-days: 7

      - name: Upload to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'release' || github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' || github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SQLX_OFFLINE=true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check
