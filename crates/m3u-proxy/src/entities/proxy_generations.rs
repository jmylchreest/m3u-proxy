//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "proxy_generations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub proxy_id: Uuid,
    pub version: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub m3u_content: Option<String>,
    pub channel_count: i32,
    pub generated_at: DateTime<Utc>,
    pub generation_time_ms: Option<i32>,
    pub is_current: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::stream_proxies::Entity",
        from = "Column::ProxyId",
        to = "super::stream_proxies::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    StreamProxies,
}

impl Related<super::stream_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StreamProxies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
