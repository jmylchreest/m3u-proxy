//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;
use crate::models::FilterSourceType;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "filters")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    pub source_type: FilterSourceType,
    pub is_inverse: bool,
    pub is_system_default: bool,
    #[sea_orm(column_type = "Text")]
    pub expression: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::proxy_filters::Entity")]
    ProxyFilters,
}

impl Related<super::proxy_filters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProxyFilters.def()
    }
}

impl Related<super::stream_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        super::proxy_filters::Relation::StreamProxies.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::proxy_filters::Relation::Filters.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
