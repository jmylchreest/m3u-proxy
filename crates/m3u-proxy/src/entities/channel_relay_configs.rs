//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "channel_relay_configs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub proxy_id: String,
    #[sea_orm(column_type = "Text")]
    pub channel_id: String,
    #[sea_orm(column_type = "Text")]
    pub profile_id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub custom_args: Option<String>,
    pub is_active: bool,
    #[sea_orm(column_type = "Text")]
    pub created_at: String,
    #[sea_orm(column_type = "Text")]
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::relay_events::Entity")]
    RelayEvents,
    #[sea_orm(
        belongs_to = "super::relay_profiles::Entity",
        from = "Column::ProfileId",
        to = "super::relay_profiles::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RelayProfiles,
    #[sea_orm(
        belongs_to = "super::stream_proxies::Entity",
        from = "Column::ProxyId",
        to = "super::stream_proxies::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    StreamProxies,
}

impl Related<super::relay_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelayEvents.def()
    }
}

impl Related<super::relay_profiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelayProfiles.def()
    }
}

impl Related<super::stream_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StreamProxies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
