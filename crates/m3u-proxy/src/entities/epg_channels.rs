//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "epg_channels")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub source_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub channel_id: String,
    #[sea_orm(column_type = "Text")]
    pub channel_name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub channel_logo: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub channel_group: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub language: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_epg_mapping::Entity")]
    ChannelEpgMapping,
    #[sea_orm(
        belongs_to = "super::epg_sources::Entity",
        from = "Column::SourceId",
        to = "super::epg_sources::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    EpgSources,
}

impl Related<super::channel_epg_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelEpgMapping.def()
    }
}

impl Related<super::epg_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EpgSources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
