version: '3.8'

services:
  m3u-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m3u-proxy
    ports:
      - "8080:8080"
    volumes:
      # Persistent data storage
      - ./data:/app/data
      # Optional: mount custom config
      - ./config.toml:/app/config.toml:ro
    environment:
      - RUST_LOG=info
      - DATABASE_URL=sqlite:/app/data/m3u-proxy.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - m3u-proxy-net

  # Alternative PostgreSQL database (uncomment to use)
  # postgres:
  #   image: postgres:15
  #   container_name: m3u-proxy-db
  #   environment:
  #     POSTGRES_DB: m3u_proxy
  #     POSTGRES_USER: m3u_proxy
  #     POSTGRES_PASSWORD: secure_password_change_me
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - m3u-proxy-net

  # Alternative with PostgreSQL
  # m3u-proxy-postgres:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: m3u-proxy-postgres
  #   ports:
  #     - "3001:8080"
  #   environment:
  #     - RUST_LOG=info
  #     - DATABASE_URL=postgresql://m3u_proxy:secure_password_change_me@postgres:5432/m3u_proxy
  #   depends_on:
  #     - postgres
  #   restart: unless-stopped
  #   networks:
  #     - m3u-proxy-net





networks:
  m3u-proxy-net:
    driver: bridge

volumes:
  postgres_data:
```

## Directory Structure
Create these directories for full functionality:

```bash
mkdir -p data/logos data/m3u
```

## Usage Examples

### Basic Development
```bash
# Start with SQLite (default)
docker-compose up -d

# View logs
docker-compose logs -f m3u-proxy

# Stop services
docker-compose down
```

### With PostgreSQL
```bash
# Uncomment postgres service in docker-compose.yml, then:
docker-compose up -d postgres m3u-proxy-postgres
```



## Environment Variables

Create a `.env` file for environment-specific settings:

```env
# Database
DATABASE_URL=sqlite:/app/data/m3u-proxy.db
# DATABASE_URL=postgresql://m3u_proxy:secure_password@postgres:5432/m3u_proxy

# Logging
RUST_LOG=info

# Security (for production)
POSTGRES_PASSWORD=your_secure_password_here
GRAFANA_ADMIN_PASSWORD=your_grafana_password_here
```

## Volumes

- `./data:/app/data` - Persistent storage for database and logos
- `./config.toml:/app/config.toml:ro` - Custom configuration (read-only)

## Health Checks

The main service includes health checks via the `/health` endpoint. Monitor with:

```bash
docker-compose ps
