//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "relay_events")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub config_id: String,
    #[sea_orm(column_type = "Text")]
    pub event_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub details: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub timestamp: String,
    #[sea_orm(column_type = "Text")]
    pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channel_relay_configs::Entity",
        from = "Column::ConfigId",
        to = "super::channel_relay_configs::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    ChannelRelayConfigs,
}

impl Related<super::channel_relay_configs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelRelayConfigs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
