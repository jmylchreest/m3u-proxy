//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "linked_xtream_sources")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub link_id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub url: String,
    #[sea_orm(column_type = "Text")]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub stream_source_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub epg_source_id: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub created_at: String,
    #[sea_orm(column_type = "Text")]
    pub updated_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::epg_sources::Entity",
        from = "Column::EpgSourceId",
        to = "super::epg_sources::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    EpgSources,
    #[sea_orm(
        belongs_to = "super::stream_sources::Entity",
        from = "Column::StreamSourceId",
        to = "super::stream_sources::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    StreamSources,
}

impl Related<super::epg_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EpgSources.def()
    }
}

impl Related<super::stream_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StreamSources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
