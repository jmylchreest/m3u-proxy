name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-check-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/m3u-proxy.db

      - name: Run SeaORM migrations
        run: cargo run -- --database-url sqlite:data/m3u-proxy.db migrate

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-test-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/test.db
          cargo run -- --database-url sqlite:data/test.db migrate

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

      - name: Run integration tests
        run: cargo test --test '*' --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-index-
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-

      - name: Install cross compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup build database
        run: |
          mkdir -p data
          touch data/build.db
          cargo run -- --database-url sqlite:data/build.db migrate

      - name: Build with cross (if needed)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --target ${{ matrix.target }}

      - name: Build natively
        if: "!matrix.cross"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip target/${{ matrix.target }}/release/m3u-proxy
          fi

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Determine archive name
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            ARCHIVE_NAME="m3u-proxy-${{ matrix.target }}.zip"
            7z a ../../../$ARCHIVE_NAME m3u-proxy.exe
          else
            ARCHIVE_NAME="m3u-proxy-${{ matrix.target }}.tar.gz"
            tar czf ../../../$ARCHIVE_NAME m3u-proxy
          fi

          cd ../../..
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: m3u-proxy-${{ matrix.target }}
          path: ${{ env.ARCHIVE_NAME }}
          retention-days: 7

      - name: Upload to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe in get-version

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Get git-based version and determine tags
        id: version
        run: |
          VERSION=$(just get-version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building with git-based version: $VERSION"

          # Determine if this is a development or release version
          if echo "$VERSION" | grep -q "dev"; then
            echo "is_development=true" >> $GITHUB_OUTPUT
            echo "docker_tag_suffix=edge" >> $GITHUB_OUTPUT
          else
            echo "is_development=false" >> $GITHUB_OUTPUT
            echo "docker_tag_suffix=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set version in source files (for SBOM consistency)
        run: just set-version "${{ steps.version.outputs.version }}"

      - name: Verify version consistency
        run: |
          CARGO_VERSION=$(just get-current-version)
          GIT_VERSION=${{ steps.version.outputs.version }}
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git-based version: $GIT_VERSION"
          if [ "$CARGO_VERSION" != "$GIT_VERSION" ]; then
            echo "❌ ERROR: Version mismatch breaks SBOM compliance!"
            exit 1
          fi
          echo "✅ Versions consistent - SBOM compliance maintained"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'release' || github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.version.outputs.docker_tag_suffix }},enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' || github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ steps.version.outputs.version }}
            BUILDKIT_INLINE_CACHE=1

      - name: Generate SBOM (Software Bill of Materials)
        if: github.event_name == 'release' || github.ref == 'refs/heads/main'
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ steps.version.outputs.version }}.spdx.json

      - name: Upload SBOM artifact (short-term CI access)
        if: github.event_name == 'release' || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.version.outputs.version }}
          path: sbom-${{ steps.version.outputs.version }}.spdx.json
          retention-days: 30  # Just for CI debugging

      - name: Store SBOM permanently (for security compliance)
        if: github.event_name == 'release'  # Only for releases
        run: |
          # Store in dedicated SBOM branch for permanent access
          git checkout --orphan sbom-archive 2>/dev/null || git checkout sbom-archive
          mkdir -p sboms
          cp sbom-${{ steps.version.outputs.version }}.spdx.json sboms/
          git add sboms/
          git commit -m "Add SBOM for release ${{ steps.version.outputs.version }}" || true
          git push origin sbom-archive || git push --set-upstream origin sbom-archive

      - name: Attach SBOM to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: sbom-${{ steps.version.outputs.version }}.spdx.json
          asset_name: sbom-${{ steps.version.outputs.version }}.spdx.json
          asset_content_type: application/json

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check
