name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"] # Trigger on version tags
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-check-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/m3u-proxy.db

      - name: Run SeaORM migrations
        run: |
          # The application runs migrations automatically on startup
          # We just need to start it briefly to initialize the database
          timeout 5 cargo run -- --database-url sqlite:data/m3u-proxy.db || true
          # Check if database was created and has tables
          sqlite3 data/m3u-proxy.db ".tables" || echo "Database initialized"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-test-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/test.db
          # Run the app briefly to initialize database with migrations
          timeout 5 cargo run -- --database-url sqlite:data/test.db || true

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

      - name: Run integration tests
        run: cargo test --test '*' --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            arch: amd64

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            arch: amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-index-
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-

      - name: Setup build database
        run: |
          mkdir -p data
          touch data/build.db
          # Run the app briefly to initialize database with migrations
          timeout 5 cargo run -- --database-url sqlite:data/build.db || true

      - name: Build with cargo
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/m3u-proxy.exe artifacts/
          else
            cp target/${{ matrix.target }}/release/m3u-proxy artifacts/
          fi
          cd artifacts
          tar czf m3u-proxy-${{ matrix.target }}.tar.gz *

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: m3u-proxy-${{ matrix.target }}
          path: artifacts/m3u-proxy-${{ matrix.target }}.tar.gz
          if-no-files-found: error

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true # Don't fail the build on security warnings
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit || true # Continue even if there are warnings

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check || true # Continue even if there are warnings

  sbom:
    name: Generate SBOM (Rust + Frontend)
    runs-on: ubuntu-latest
    needs: [check] # Only needs basic checks, can run parallel to tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install cargo-sbom
        run: cargo install cargo-sbom

      - name: Install Node.js SBOM tools
        run: npm install -g @cyclonedx/cyclonedx-npm

      - name: Generate Rust SPDX SBOM
        run: cargo sbom --output-format spdx_json_2_3 --output-file rust-sbom-spdx.json

      - name: Generate Rust CycloneDX SBOM
        run: cargo sbom --output-format cyclone_json_1_6 --output-file rust-sbom-cyclonedx.json

      - name: Generate Frontend SPDX SBOM
        run: |
          cd frontend
          npm sbom --sbom-format=spdx --sbom-type=application > ../frontend-sbom-spdx.json

      - name: Generate Frontend CycloneDX SBOM
        run: |
          cd frontend
          npx @cyclonedx/cyclonedx-npm --output-file ../frontend-sbom-cyclonedx.json

      - name: Install jq for SBOM merging
        run: sudo apt-get install -y jq

      - name: Create Combined SPDX SBOM
        run: |
          # Create a combined SPDX SBOM with both Rust and Frontend components
          jq -s '
            {
              "spdxVersion": "SPDX-2.3",
              "dataLicense": "CC0-1.0",
              "SPDXID": "SPDXRef-DOCUMENT",
              "name": "m3u-proxy-complete",
              "documentNamespace": ("https://github.com/jmylchreest/m3u-proxy/" + (now | strftime("%Y%m%d%H%M%S"))),
              "creationInfo": {
                "created": (now | strftime("%Y-%m-%dT%H:%M:%SZ")),
                "creators": ["Tool: GitHub Actions CI/CD"]
              },
              "packages": (.[0].packages + .[1].packages),
              "relationships": (.[0].relationships + .[1].relationships)
            }
          ' rust-sbom-spdx.json frontend-sbom-spdx.json > sbom-spdx.json

      - name: Create Combined CycloneDX SBOM
        run: |
          # Create a combined CycloneDX SBOM with both Rust and Frontend components
          jq -s '
            {
              "bomFormat": "CycloneDX",
              "specVersion": "1.6",
              "serialNumber": ("urn:uuid:" + (now | tostring | @base64)),
              "version": 1,
              "metadata": {
                "timestamp": (now | strftime("%Y-%m-%dT%H:%M:%S.000Z")),
                "tools": [
                  {"vendor": "GitHub Actions", "name": "CI/CD Pipeline", "version": "1.0"}
                ],
                "component": {
                  "type": "application",
                  "name": "m3u-proxy",
                  "version": "dev"
                }
              },
              "components": (.[0].components + .[1].components)
            }
          ' rust-sbom-cyclonedx.json frontend-sbom-cyclonedx.json > sbom-cyclonedx.json

      - name: Upload Combined SPDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom-spdx.json
          if-no-files-found: error

      - name: Upload Combined CycloneDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom-cyclonedx.json
          if-no-files-found: error

      - name: Upload Individual SBOMs (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: individual-sboms
          path: |
            rust-sbom-*.json
            frontend-sbom-*.json
          if-no-files-found: error

  containers:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: [check, test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container with versioned tagging
        run: just build-container-versioned

      - name: Push container to GitHub Container Registry
        run: just push-container

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, containers, sbom]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release notes
        run: |
          echo "## Release ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Binary Artifacts" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          for file in artifacts/*/m3u-proxy-*.tar.gz; do
            filename=$(basename "$file")
            echo "- $filename" >> RELEASE_NOTES.md
          done
          echo "" >> RELEASE_NOTES.md
          echo "### Software Bill of Materials (SBOM)" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Complete dependency information for both Rust backend and Node.js frontend:" >> RELEASE_NOTES.md
          echo "- \`sbom-spdx.json\` - SPDX 2.3 format (ISO standard)" >> RELEASE_NOTES.md
          echo "- \`sbom-cyclonedx.json\` - CycloneDX 1.6 format (ECMA standard)" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Individual component SBOMs are also available in the individual-sboms artifact for detailed analysis." >> RELEASE_NOTES.md

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/m3u-proxy-*.tar.gz
            artifacts/sbom-spdx/sbom-spdx.json
            artifacts/sbom-cyclonedx/sbom-cyclonedx.json
          body_path: RELEASE_NOTES.md
          fail_on_unmatched_files: true
