//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "logo_assets")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub file_name: String,
    #[sea_orm(column_type = "Text")]
    pub file_path: String,
    pub file_size: i32,
    #[sea_orm(column_type = "Text")]
    pub mime_type: String,
    #[sea_orm(column_type = "Text")]
    pub asset_type: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub source_url: Option<String>,
    pub width: Option<i32>,
    pub height: Option<i32>,
    #[sea_orm(nullable)]
    pub parent_asset_id: Option<Uuid>,
    #[sea_orm(column_type = "Text")]
    pub format_type: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentAssetId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef,
}

impl ActiveModelBehavior for ActiveModel {}
