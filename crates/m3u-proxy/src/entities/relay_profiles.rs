//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "relay_profiles")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub video_codec: String,
    #[sea_orm(column_type = "Text")]
    pub audio_codec: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub video_profile: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub video_preset: Option<String>,
    pub video_bitrate: Option<i32>,
    pub audio_bitrate: Option<i32>,
    pub audio_sample_rate: Option<i32>,
    pub audio_channels: Option<i32>,
    pub enable_hardware_acceleration: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub preferred_hwaccel: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub manual_args: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub output_format: String,
    pub segment_duration: Option<i32>,
    pub max_segments: Option<i32>,
    pub input_timeout: i32,
    pub is_system_default: bool,
    pub is_active: bool,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::stream_proxies::Entity")]
    StreamProxies,
}

impl Related<super::stream_proxies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StreamProxies.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
