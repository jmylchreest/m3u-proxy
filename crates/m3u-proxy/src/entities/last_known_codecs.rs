//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::{DateTime, Utc};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "last_known_codecs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub stream_url: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub video_codec: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub audio_codec: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub container_format: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub resolution: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub framerate: Option<String>,
    pub bitrate: Option<i32>,
    pub video_bitrate: Option<i32>,
    pub audio_bitrate: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub audio_channels: Option<String>,
    pub audio_sample_rate: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub probe_method: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub probe_source: Option<String>,
    pub detected_at: DateTime<Utc>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
