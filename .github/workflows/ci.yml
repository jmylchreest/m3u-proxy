name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-check-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/m3u-proxy.db

      - name: Run SeaORM migrations
        run: |
          # The application runs migrations automatically on startup
          # We just need to start it briefly to initialize the database
          timeout 5 cargo run -- --database-url sqlite:data/m3u-proxy.db || true
          # Check if database was created and has tables
          sqlite3 data/m3u-proxy.db ".tables" || echo "Database initialized"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-test-
            ${{ runner.os }}-cargo-target-

      - name: Setup test database
        run: |
          mkdir -p data
          touch data/test.db
          # Run the app briefly to initialize database with migrations
          timeout 5 cargo run -- --database-url sqlite:data/test.db || true

      - name: Run tests
        run: cargo test --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

      - name: Run integration tests
        run: cargo test --test '*' --all-features --verbose
        env:
          DATABASE_URL: sqlite:data/test.db

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            arch: amd64

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
            arch: amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe in get-version

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-index-
            ${{ runner.os }}-cargo-index-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-target-

      - name: Setup build database
        run: |
          mkdir -p data
          touch data/build.db
          # Run the app briefly to initialize database with migrations
          timeout 5 cargo run -- --database-url sqlite:data/build.db || true

      - name: Build with cargo
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/m3u-proxy.exe artifacts/
          else
            cp target/${{ matrix.target }}/release/m3u-proxy artifacts/
          fi
          cd artifacts
          tar czf m3u-proxy-${{ matrix.target }}.tar.gz *

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: m3u-proxy-${{ matrix.target }}
          path: artifacts/m3u-proxy-${{ matrix.target }}.tar.gz
          if-no-files-found: error

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true # Don't fail the build on security warnings
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit || true # Continue even if there are warnings

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check || true # Continue even if there are warnings

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [check, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        platform:
          - linux/amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release notes
        run: |
          echo "## Release ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Artifacts" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          for file in artifacts/*/m3u-proxy-*.tar.gz; do
            filename=$(basename "$file")
            echo "- $filename" >> RELEASE_NOTES.md
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/m3u-proxy-*.tar.gz
          body_path: RELEASE_NOTES.md
          fail_on_unmatched_files: true
